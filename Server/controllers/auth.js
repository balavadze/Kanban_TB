const db = require('../database/setup');
const { hash, genSalt } = require('bcrypt');
const bcrypt = require('bcryptjs');
// const bcrypt = require("bcrypt");

const { sign, jwt } = require('jsonwebtoken');
const { config } = require('dotenv');

config();

exports.getUsers = async (req, res) => {
  try {
    const { rows } = await db.query('select user_id, email from users');

    return res.status(200).json({
      success: true,
      users: rows,
    });
  } catch (error) {
    console.log(error.message);
  }
};

//!3 NEED TO ADD HASH AND SALT TO PASSWORD
// Test User:
// "Email": "Pisa@gmail.com",
// "Password": "Pisa123!"

exports.createUser = async (req, res) => {
  const { email, password } = req.body;

  // hash is a one way encoding
  let salt = await bcrypt.genSalt(12);
  console.log(salt);
  let hashPW = await bcrypt.hash(password, salt);
  console.log(hashPW);
  // autogenerated salt async
  let hashPWshort = await bcrypt.hash(password, 12);
  try {
    await db.query('INSERT INTO  users(email,password) VALUES ($1 , $2)', [
      email,
      hashPWshort,
    ]);

    return res.status(201).json({
      success: true,
      message: 'The registration was successful',
    });
  } catch (error) {
    console.log(error.message);
    return res.status(500).json({
      error: error.message,
    });
  }
};

//Login Function

exports.login = async (req, res) => {
  // console.log("login");
  let user = req.user;
  // return console.log(user);
  let payload = {
    id: user.user_id,
    email: user.email,
    // password: user.password,
  };
  try {
    const token = await sign(payload, process.env.SECRET, {
      expiresIn: '1h',
    });
    // send a token to client
    res.status(200).json({
      message: 'logged in',
      token: token,
    });

    // const token = await sign(payload, process.env.SECRET, {
    //   expiresIn: "1h",
    // });
    // return res.status(200).cookie("token", token, { httpOnly: true }).json({
    //   success: true,
    //   message: "Logged in successfully",
    //   // payload,
    // });
  } catch (error) {
    console.log(error.message);
    return res.status(500).json({
      error: error.message,
    });
  }
};

//Protected Function

exports.protected = async (req, res) => {
  try {
    return res.status(200).json({
      info: 'protected info',
    });
  } catch (error) {
    console.log(error.message);
  }
};

// Logout Function

exports.logout = async (req, res) => {
  try {
    return res.status(200).clearCookie('token', { httpOnly: true }).json({
      success: true,
      message: 'Logged out',
    });
  } catch (error) {
    console.log(error.message);
    return res.status(500).json({
      error: error.message,
    });
  }
};

// Create TODOs

exports.createTodo = async (req, res) => {
  const { name, content, tag, status, priority, duedate } = req.body;
  try {
    await db.query(
      'INSERT INTO  todo(name, content, tag, status, priority, duedate) VALUES ($1 , $2, $3, $4, $5, $6)',
      [name, content, tag, status, priority, duedate]
    );

    return res.status(201).json({
      success: true,
      message: 'New Task added',
    });
  } catch (error) {
    console.log(error.message);
    return res.status(500).json({
      error: error.message,
    });
  }
};

// Edit TODO

exports.getTodo = async (req, res) => {
  try {
    const { rows } = await db.query('SELECT * FROM todo;');

    return res.status(200).json({
      success: true,
      todo: rows,
    });
  } catch (error) {
    console.log(error.message);
  }
};
